;
; ForkStream Examples - extensions.conf
;
; This file contains example dialplan configurations demonstrating
; various use cases for the ForkStream application.
;

; =============================================================================
; BASIC EXAMPLES
; =============================================================================

[basic-examples]
; Simple audio forking to a monitoring server
exten => 1001,1,Answer()
exten => 1001,2,Verbose(2,Starting basic ForkStream example)
exten => 1001,3,ForkStream(192.168.1.100:8080)
exten => 1001,4,Playback(demo-congrats)
exten => 1001,5,Echo()
exten => 1001,6,Hangup()

; Forking with variables
exten => 1002,1,Answer()
exten => 1002,2,Set(MONITOR_SERVER=10.0.0.5)
exten => 1002,3,Set(MONITOR_PORT=9000)
exten => 1002,4,ForkStream(${MONITOR_SERVER}:${MONITOR_PORT})
exten => 1002,5,Dial(SIP/agent)
exten => 1002,6,Hangup()

; =============================================================================
; CALL CENTER EXAMPLES
; =============================================================================

[call-center]
; Queue with automatic call monitoring
exten => 2001,1,Answer()
exten => 2001,2,Set(QUEUE_NAME=support)
exten => 2001,3,Set(MONITOR_DEST=call-monitor.company.com:8080)
exten => 2001,4,Verbose(2,Enabling call monitoring for queue ${QUEUE_NAME})
exten => 2001,5,ForkStream(${MONITOR_DEST})
exten => 2001,6,Queue(${QUEUE_NAME})
exten => 2001,7,Hangup()

; Agent-specific monitoring
exten => 2002,1,Answer()
exten => 2002,2,Set(AGENT_ID=${CHANNEL(name):5:4})  ; Extract agent ID from channel
exten => 2002,3,Set(MONITOR_IP=172.16.0.10)
exten => 2002,4,Set(MONITOR_PORT=$[8000 + ${AGENT_ID}])  ; Dynamic port per agent
exten => 2002,5,ForkStream(${MONITOR_IP}:${MONITOR_PORT})
exten => 2002,6,Dial(SIP/agent${AGENT_ID})
exten => 2002,7,Hangup()

; Conference with recording
exten => 2003,1,Answer()
exten => 2003,2,Set(CONF_ID=${EXTEN})
exten => 2003,3,Set(RECORD_SERVER=recordings.company.com:8080)
exten => 2003,4,Verbose(2,Starting conference ${CONF_ID} with recording)
exten => 2003,5,ForkStream(${RECORD_SERVER})
exten => 2003,6,ConfBridge(${CONF_ID})
exten => 2003,7,Hangup()

; =============================================================================
; SECURITY AND COMPLIANCE
; =============================================================================

[compliance]
; VIP customer calls - enhanced monitoring
exten => 3001,1,Answer()
exten => 3001,2,Set(CUSTOMER_TYPE=${DB(customer/${CALLERID(num)}/type)})
exten => 3001,3,GotoIf($["${CUSTOMER_TYPE}" = "VIP"]?vip:normal)
exten => 3001,4(normal),Goto(standard-service,${EXTEN},1)
exten => 3001,5(vip),Set(VIP_MONITOR=vip-monitor.company.com:8443)
exten => 3001,6(vip),Verbose(2,VIP customer detected - enabling enhanced monitoring)
exten => 3001,7(vip),ForkStream(${VIP_MONITOR})
exten => 3001,8(vip),Dial(SIP/vip-agent)
exten => 3001,9(vip),Hangup()

; Legal compliance recording
exten => 3002,1,Answer()
exten => 3002,2,Set(JURISDICTION=${DB(customer/${CALLERID(num)}/jurisdiction)})
exten => 3002,3,Set(COMPLIANCE_REQUIRED=${DB(jurisdiction/${JURISDICTION}/recording_required)})
exten => 3002,4,GotoIf($["${COMPLIANCE_REQUIRED}" = "yes"]?record:norecord)
exten => 3002,5(record),Set(LEGAL_MONITOR=legal.company.com:9443)
exten => 3002,6(record),Verbose(2,Legal recording required for jurisdiction ${JURISDICTION})
exten => 3002,7(record),ForkStream(${LEGAL_MONITOR})
exten => 3002,8(norecord),Dial(SIP/representative)
exten => 3002,9,Hangup()

; =============================================================================
; ADVANCED ROUTING
; =============================================================================

[advanced-routing]
; Multi-destination forking based on call type
exten => 4001,1,Answer()
exten => 4001,2,Set(CALL_TYPE=${DB(dnis/${EXTEN}/type)})
exten => 4001,3,Set(PRIMARY_MONITOR=monitor1.company.com:8080)
exten => 4001,4,Set(BACKUP_MONITOR=monitor2.company.com:8080)
exten => 4001,5,Verbose(2,Call type: ${CALL_TYPE})
exten => 4001,6,ForkStream(${PRIMARY_MONITOR})
exten => 4001,7,GotoIf($["${CALL_TYPE}" = "critical"]?backup:continue)
exten => 4001,8(backup),ForkStream(${BACKUP_MONITOR})
exten => 4001,9(continue),Dial(SIP/handler)
exten => 4001,10,Hangup()

; Time-based monitoring
exten => 4002,1,Answer()
exten => 4002,2,Set(HOUR=${STRFTIME(${EPOCH},,%H)})
exten => 4002,3,Set(DOW=${STRFTIME(${EPOCH},,%u)})  ; Day of week (1-7)
exten => 4002,4,GotoIf($[${HOUR} >= 18 || ${HOUR} < 8]?afterhours:business)
exten => 4002,5,GotoIf($[${DOW} = 6 || ${DOW} = 7]?afterhours:business)
exten => 4002,6(business),Set(MONITOR_DEST=business-hours.company.com:8080)
exten => 4002,7(business),Goto(monitor)
exten => 4002,8(afterhours),Set(MONITOR_DEST=after-hours.company.com:8080)
exten => 4002,9(monitor),ForkStream(${MONITOR_DEST})
exten => 4002,10,Dial(SIP/oncall)
exten => 4002,11,Hangup()

; =============================================================================
; INTEGRATION EXAMPLES
; =============================================================================

[integration]
; CRM integration with call analysis
exten => 5001,1,Answer()
exten => 5001,2,Set(CUSTOMER_ID=${DB(callerid/${CALLERID(num)}/customer_id)})
exten => 5001,3,Set(ANALYSIS_SERVER=crm-analytics.company.com:8080)
exten => 5001,4,Set(CDR(userfield)=ForkStream:${ANALYSIS_SERVER})
exten => 5001,5,Verbose(2,Customer ${CUSTOMER_ID} - enabling CRM analytics)
exten => 5001,6,ForkStream(${ANALYSIS_SERVER})
exten => 5001,7,Dial(SIP/sales-team)
exten => 5001,8,Hangup()

; Speech-to-text transcription
exten => 5002,1,Answer()
exten => 5002,2,Set(TRANSCRIPTION_SERVER=stt.company.com:8080)
exten => 5002,3,Set(LANGUAGE=${DB(customer/${CALLERID(num)}/language)})
exten => 5002,4,Set(CDR(userfield)=STT:${LANGUAGE})
exten => 5002,5,Verbose(2,Enabling speech-to-text for language ${LANGUAGE})
exten => 5002,6,ForkStream(${TRANSCRIPTION_SERVER})
exten => 5002,7,Dial(SIP/multilingual-support)
exten => 5002,8,Hangup()

; Voice biometrics
exten => 5003,1,Answer()
exten => 5003,2,Set(BIOMETRIC_SERVER=voice-auth.company.com:8443)
exten => 5003,3,Set(SECURITY_LEVEL=${DB(customer/${CALLERID(num)}/security_level)})
exten => 5003,4,GotoIf($["${SECURITY_LEVEL}" = "high"]?biometric:normal)
exten => 5003,5(normal),Goto(standard-auth,${EXTEN},1)
exten => 5003,6(biometric),Verbose(2,High security customer - enabling voice biometrics)
exten => 5003,7(biometric),ForkStream(${BIOMETRIC_SERVER})
exten => 5003,8(biometric),Dial(SIP/secure-line)
exten => 5003,9(biometric),Hangup()

; =============================================================================
; ERROR HANDLING AND FAILOVER
; =============================================================================

[error-handling]
; Graceful degradation when monitoring fails
exten => 6001,1,Answer()
exten => 6001,2,Set(PRIMARY_MONITOR=monitor.company.com:8080)
exten => 6001,3,Set(BACKUP_MONITOR=backup-monitor.company.com:8080)
exten => 6001,4,Verbose(2,Attempting primary monitoring)
exten => 6001,5,ForkStream(${PRIMARY_MONITOR})
exten => 6001,6,GotoIf($[${FORKSTREAMSTATUS} = "SUCCESS"]?continue:backup)
exten => 6001,7(backup),Verbose(1,Primary monitor failed - trying backup)
exten => 6001,8(backup),ForkStream(${BACKUP_MONITOR})
exten => 6001,9(continue),Dial(SIP/agent)
exten => 6001,10,Hangup()

; Load balancing across multiple monitoring servers
exten => 6002,1,Answer()
exten => 6002,2,Set(SERVER_COUNT=3)
exten => 6002,3,Set(SERVER_ID=$[${RAND(1,${SERVER_COUNT})}])
exten => 6002,4,Set(MONITOR_SERVER=monitor${SERVER_ID}.company.com:8080)
exten => 6002,5,Verbose(2,Using monitoring server ${SERVER_ID})
exten => 6002,6,ForkStream(${MONITOR_SERVER})
exten => 6002,7,Dial(SIP/agent)
exten => 6002,8,Hangup()

; =============================================================================
; DEVELOPMENT AND TESTING
; =============================================================================

[testing]
; Test harness for ForkStream
exten => 9001,1,Answer()
exten => 9001,2,Set(TEST_SERVER=127.0.0.1:8080)
exten => 9001,3,Verbose(2,ForkStream test - sending to ${TEST_SERVER})
exten => 9001,4,ForkStream(${TEST_SERVER})
exten => 9001,5,Playbook(silence/5)  ; 5 seconds of silence
exten => 9001,6,SayDigits(12345)
exten => 9001,7,Playback(demo-congrats)
exten => 9001,8,Echo(10)  ; 10 seconds of echo
exten => 9001,9,Hangup()

; Stress test extension
exten => 9002,1,Answer()
exten => 9002,2,Set(LOOPS=10)
exten => 9002,3,Set(i=1)
exten => 9002,4(loop),Verbose(2,ForkStream stress test iteration ${i})
exten => 9002,5,ForkStream(127.0.0.1:808${i})
exten => 9002,6,Playback(silence/1)
exten => 9002,7,Set(i=$[${i}+1])
exten => 9002,8,GotoIf($[${i} <= ${LOOPS}]?loop:end)
exten => 9002,9(end),Verbose(2,Stress test completed)
exten => 9002,10,Hangup()

; =============================================================================
; MACRO DEFINITIONS
; =============================================================================

[macro-forkstream-with-fallback]
exten => s,1,Set(PRIMARY=${ARG1})
exten => s,2,Set(BACKUP=${ARG2})
exten => s,3,Verbose(2,Attempting ForkStream to ${PRIMARY})
exten => s,4,ForkStream(${PRIMARY})
exten => s,5,GotoIf($[${FORKSTREAMSTATUS} = "SUCCESS"]?end:fallback)
exten => s,6(fallback),Verbose(1,Primary failed, trying backup ${BACKUP})
exten => s,7,ForkStream(${BACKUP})
exten => s,8(end),MacroExit()

; Usage example:
; exten => 8001,1,Answer()
; exten => 8001,2,Macro(forkstream-with-fallback,primary.com:8080,backup.com:8080)
; exten => 8001,3,Dial(SIP/agent)
; exten => 8001,4,Hangup()

; =============================================================================
; NOTES
; =============================================================================

; Performance considerations:
; - Each ForkStream instance consumes minimal CPU and memory
; - Network bandwidth usage depends on codec (G.711: ~64kbps, G.729: ~8kbps)
; - Monitor UDP packet loss at destination servers
; - Consider implementing application-level heartbeats for reliability
;
; Security considerations:
; - ForkStream sends unencrypted UDP packets
; - Use VPN or private networks for sensitive audio
; - Implement firewall rules to restrict destination access
; - Consider legal and regulatory requirements for call recording
;
; Troubleshooting:
; - Check Asterisk logs for ForkStream error messages
; - Use tcpdump/wireshark to monitor UDP traffic
; - Verify network connectivity with nc -u command
; - Test with simple destinations before complex integrations 